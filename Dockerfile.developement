# ---------- base (with pnpm via corepack)
FROM node:20-alpine AS base
WORKDIR /app
RUN corepack enable

# ---------- deps cache (pnpm fetch)
FROM base AS deps
COPY package.json pnpm-lock.yaml ./
RUN pnpm fetch

# ---------- build (install, build, prune to prod)
FROM base AS build
ENV NODE_ENV=production
WORKDIR /app
# bring the offline store
COPY --from=deps /root/.local/share/pnpm/store /root/.local/share/pnpm/store
COPY package.json pnpm-lock.yaml ./
# install all deps (offline), build, then prune to prod-only node_modules
RUN pnpm install --frozen-lockfile --offline
# copy sources and build
COPY tsconfig*.json ./
COPY src ./src
# if you have nest-cli.json or other files, copy them too
# COPY nest-cli.json ./
RUN pnpm build
RUN pnpm prune --prod

# ---------- runtime (copy built app + prod node_modules)
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production
ENV PORT=3000
# copy only what's needed to run
COPY --from=build /app/package.json ./
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/dist ./dist
EXPOSE 3000
CMD ["node", "dist/main.js"]
